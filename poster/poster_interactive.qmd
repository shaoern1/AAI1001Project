---
title: "Exploring the Insights within the Global Happiness Index"
format: 
  html:
    toc: true
    toc-depth: 2
    number-sections: true
    section-depth: 2
    embed-resource: true
editor: visual
author: 
  - Toh Shao Ern
  - Kuick Si Qi
  - Wong Khin Foong
  - Sebestian Fernandez
  - Yu Haotong
---

```{r setup, include=FALSE}
# Set a CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require("tidyverse")) install.packages("tidyverse", dependencies = TRUE)
if (!require("sf")) install.packages("sf", dependencies = TRUE)
if (!require("rnaturalearth")) install.packages("rnaturalearth", dependencies = TRUE)
if (!require("countrycode")) install.packages("countrycode", dependencies = TRUE)
if (!require("ggrepel")) install.packages("ggrepel", dependencies = TRUE)
if (!require("readxl")) install.packages("readxl", dependencies = TRUE)
if (!require("knitr")) install.packages("knitr", dependencies = TRUE)
if (!require("dplyr")) install.packages("dplyr", dependencies = TRUE)
if (!require("viridis")) install.packages("viridis", dependencies = TRUE)
if (!require("gridExtra")) install.packages("gridExtra", dependencies = TRUE)
if (!require("grid")) install.packages("grid", dependencies = TRUE)
if (!require("ggplot2")) install.packages("ggplot2", dependencies = TRUE)

library(scales)
library(readxl)
library(dplyr)
library(knitr)
library(tidyverse) # load dplyr, ggplot2, stringr, etc.
library(tmap)
library(plotly) # create interactive web-based graphics via plotly.js)
library(sf) # working with geographic simple features in R
library(rnaturalearth) # World map data from Natural Earth
library(countrycode) # get ISO code from country names
library(ggrepel) # "ggplot2" extension for overlapping text labels
library(viridis) # color palettes for "ggplot2")
library(gridExtra) # arrange multiple grid-based plots on a page
library(grid) # grid graphics system for R
library(ggplot2) # create elegant data visualizations using the Grammar of Graphics
```

```{r, include=FALSE}
df <- read_excel("data/DataForTable2.1.xls")
data(World)

countries <- select(World, iso_a3, name)
countries <- countries$name

# how many countries are missing in the dataset use Country name
missing_countries <- setdiff(countries, unique(df$"Country name"))

df <- df %>%
  filter(year %in% c(2021, 2022, 2023))

# Rename the columns
colnames(df) <- c("country", "year", "score", colnames(df)[4:ncol(df)])

# Keep only the specified columns
df <- df[, c("country", "year", "score")]

# List of all countries in your data
all_countries <- unique(df$country)

# List of years to ensure each country has entries for each year
years <- c(2021, 2022, 2023)

# Create a data frame with all combinations of countries and years
complete_df <- expand.grid(country = all_countries, year = years)

# Add country codes to the complete data frame
complete_df$country_code <- countrycode(complete_df$country, origin = "country.name", destination = "iso3c")

# Merge the complete data frame with the original data
df_combined <- left_join(complete_df, df, by = c("country", "year"))

# Calculate the mean score for each country
country_means <- df_combined %>%
  group_by(country) %>%
  summarize(mean_score = mean(score, na.rm = TRUE))

# Merge the country means back into the combined data
df_combined <- left_join(df_combined, country_means, by = "country")

# Fill any remaining NA values with the mean score of the respective country
df_combined <- df_combined %>%
  mutate(score = ifelse(is.na(score), mean_score, score))

# Check for any remaining missing values
missing_scores <- df_combined %>% filter(is.na(score))
if (nrow(missing_scores) > 0) {
  warning("There are still countries with missing scores.")
}

region <- read_csv("data/world-regions-according-to-the-world-bank.csv")
# head(region)

df_combined <- left_join(df_combined, region, by = c("country_code" = "Code"))
# find empty rows in "World Region according to the World Bank"

missing_region <- df_combined %>% filter(is.na(`World Region according to the World Bank`))
# print(missing_region)

# put taiwan within china
df_combined$`World Region according to the World Bank`[which(df_combined$country == "Taiwan Province of China")] <- "East Asia and Pacific"

df_combined$`World Region according to the World Bank`[which(df_combined$`World Region according to the World Bank` == "North America")] <- "Latin America and Caribbean"

df_combined$`World Region according to the World Bank`[which(df_combined$`World Region according to the World Bank` == "Latin America and Caribbean")] <- "Americas"
```

# Interactive Exploration of Global Happiness Index

## Interactive Globe

```{r, echo=FALSE, warning=FALSE}
# create the bin globe with time slider using plotly in R using plot_geo and represent using plasma color scale
df_combined %>%
  plot_geo(
    locationmode = "ISO-3",
    locations = ~country_code,
    z = ~score,
    color = ~score,
    colors = "plasma",
    marker = list(line = list(color = "black", width = 0.5)),
    frame = ~year,
    text = ~paste("Country: ", country, "<br>Score: ", score),
    hoverinfo = "text"
  ) %>%
  colorbar(title = "Happiness Score") %>%
  layout(
    title = "Global Happiness Index (2021-2023)",
    geo = list(
      showframe = FALSE,
      showcoastlines = FALSE,
      projection = list(type = "orthographic"),
      showocean = TRUE,
      oceancolor = "lightblue"
    ),
    updatemenus = list(
      list(
        buttons = list(
          list(
            args = list(
              frame = list(duration = 1000, redraw = TRUE),
              fromcurrent = TRUE
            ),
            label = "Play",
            method = "animate"
          ),
          list(
            args = list(
              frame = list(duration = 0, redraw = TRUE),
              mode = "immediate"
            ),
            label = "Pause",
            method = "animate"
          )
        ),
        direction = "left",
        pad = list(r = 10, t = 87),
        showactive = FALSE,
        type = "buttons",
        x = 0.1,
        xanchor = "right",
        y = 0,
        yanchor = "top"
      )
    )
  )
```

## Prediction of Happiness Score

The happiness score will be predicted based on the following variables: GDP per Capita, Social Support, Healthy Life Expectancy, Freedom to Make Life Choices, Generosity, Perceptions of Corruption, Positive Affect, and Negative Affect. The prediction will be based on a regression model using historical data from the World Happiness Report.

### Precompute Model Coefficients in R

```{r, echo=FALSE, warning=FALSE}
# Load the data
df_happiness <- read_excel("data/DataForTable2.1.xls")

# convert column names to snake case
colnames(df_happiness) <- tolower(colnames(df_happiness))

# Rename all columns
colnames(df_happiness) <- c("country", "year", "score", "gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices", "generosity", "perceptions_of_corruption", "positive_affect", "negative_affect")

model <- lm(score ~ gdp_per_capita + social_support + healthy_life_expectancy + freedom_to_make_life_choices + generosity + perceptions_of_corruption + positive_affect + negative_affect, data = df_happiness)

coefficients <- coef(model)

# Create a data frame for the coefficients

data.frame(
  Coefficient = coefficients
) %>% kable(caption = "Model Coefficients")
```

### Try Out

```{=html}
<style>
  .container {
    background-color: #ffffff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 600px;
    width: 100%;
  }
  .header {
    text-align: center;
    color: #333333;
  }
  .form-group {
    display: flex;
    flex-direction: column;
  }
  .form-label {
    margin-bottom: 5px;
    font-weight: bold;
    color: #555555;
  }
  .form-input {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #cccccc;
    border-radius: 4px;
    box-sizing: border-box;
  }
  .btn {
    width: 100%;
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  }
  .btn:hover {
    background-color: #45a049;
  }
  .result-text {
    text-align: center;
    font-size: 18px;
    color: #333333;
    font-weight: bold;
  }
</style>
<script type="text/javascript">
  // Model coefficients obtained from R
  const coefficients = {
    intercept: `r coefficients[1]`,
    gdp_per_capita: `r coefficients["gdp_per_capita"]`,
    social_support: `r coefficients["social_support"]`,
    healthy_life_expectancy: `r coefficients["healthy_life_expectancy"]`,
    freedom_to_make_life_choices: `r coefficients["freedom_to_make_life_choices"]`,
    generosity: `r coefficients["generosity"]`,
    perceptions_of_corruption: `r coefficients["perceptions_of_corruption"]`,
    positive_affect: `r coefficients["positive_affect"]`,
    negative_affect: `r coefficients["negative_affect"]`
  };

  function predictHappiness() {
    // Get input values
    const gdp_per_capita = parseFloat(document.getElementById("gdp_per_capita").value);
    const social_support = parseFloat(document.getElementById("social_support").value);
    const healthy_life_expectancy = parseFloat(document.getElementById("healthy_life_expectancy").value);
    const freedom = parseFloat(document.getElementById("freedom").value);
    const generosity = parseFloat(document.getElementById("generosity").value);
    const corruption = parseFloat(document.getElementById("corruption").value);
    const positive_affect = parseFloat(document.getElementById("positive_affect").value);
    const negative_affect = parseFloat(document.getElementById("negative_affect").value);

    // Calculate predicted happiness score
    const predictedScore = coefficients.intercept +
      coefficients.gdp_per_capita * gdp_per_capita +
      coefficients.social_support * social_support +
      coefficients.healthy_life_expectancy * healthy_life_expectancy +
      coefficients.freedom_to_make_life_choices * freedom +
      coefficients.generosity * generosity +
      coefficients.perceptions_of_corruption * corruption +
      coefficients.positive_affect * positive_affect +
      coefficients.negative_affect * negative_affect;

    // Display the result
    document.getElementById("prediction_result").innerText = "Predicted Happiness Score: " + predictedScore.toFixed(2);
  }
</script>
<div class="container">
  <h1 class="header">Happiness Score Predictor</h1>
  <div class="form-group">
    <label for="gdp_per_capita" class="form-label">GDP per capita:</label>
    <input type="number" id="gdp_per_capita" step="0.1" value="1.0" class="form-input"><br>

    <label for="social_support" class="form-label">Social support:</label>
    <input type="number" id="social_support" step="0.1" value="0.8" class="form-input"><br>

    <label for="healthy_life_expectancy" class="form-label">Healthy life expectancy at birth:</label>
    <input type="number" id="healthy_life_expectancy" step="0.1" value="70" class="form-input"><br>

    <label for="freedom" class="form-label">Freedom to make life choices:</label>
    <input type="number" id="freedom" step="0.1" value="0.6" class="form-input"><br>

    <label for="generosity" class="form-label">Generosity:</label>
    <input type="number" id="generosity" step="0.1" value="0.2" class="form-input"><br>

    <label for="corruption" class="form-label">Perceptions of corruption:</label>
    <input type="number" id="corruption" step="0.1" value="0.5" class="form-input"><br>

    <label for="positive_affect" class="form-label">Positive affect:</label>
    <input type="number" id="positive_affect" step="0.1" value="0.7" class="form-input"><br>

    <label for="negative_affect" class="form-label">Negative affect:</label>
    <input type="number" id="negative_affect" step="0.1" value="0.2" class="form-input"><br>

    <button onclick="predictHappiness()" class="btn">Predict Happiness Score</button>
  </div>
  <p id="prediction_result" class="result-text">Predicted Happiness Score: </p>
</div>
```
